[{"/app/src/index.tsx":"1","/app/src/components/App.tsx":"2","/app/src/components/BarChart.tsx":"3","/app/src/reducers/index.ts":"4","/app/src/actions/dataActions.ts":"5","/app/src/helper/draw.ts":"6","/app/src/reducers/dataReducer.tsx":"7","/app/src/components/QuantityInput.tsx":"8","/app/src/components/OrderDirectionInput.tsx":"9","/app/src/components/OrderTypeInput.tsx":"10","/app/src/styles/styles.tsx":"11","/app/src/helper/sorting.ts":"12","/app/src/actions/actionTypes.ts":"13","/app/src/helper/stringTypes.ts":"14","/app/src/helper/setProcessedData.ts":"15","/app/src/articles.ts":"16"},{"size":167,"mtime":1606406979890,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1606388830935,"results":"19","hashOfConfig":"18"},{"size":3784,"mtime":1606390537983,"results":"20","hashOfConfig":"18"},{"size":262,"mtime":1606390638393,"results":"21","hashOfConfig":"18"},{"size":861,"mtime":1606391105173,"results":"22","hashOfConfig":"18"},{"size":3138,"mtime":1606408545545,"results":"23","hashOfConfig":"18"},{"size":2260,"mtime":1606390531296,"results":"24","hashOfConfig":"18"},{"size":1006,"mtime":1606387621541,"results":"25","hashOfConfig":"18"},{"size":1041,"mtime":1606387560125,"results":"26","hashOfConfig":"18"},{"size":1010,"mtime":1606387591453,"results":"27","hashOfConfig":"18"},{"size":869,"mtime":1606388577390,"results":"28","hashOfConfig":"18"},{"size":2606,"mtime":1606391577985,"results":"29","hashOfConfig":"18"},{"size":779,"mtime":1606389984626,"results":"30","hashOfConfig":"18"},{"size":130,"mtime":1606391178315,"results":"31","hashOfConfig":"18"},{"size":1253,"mtime":1606391079680,"results":"32","hashOfConfig":"18"},{"size":16244540,"mtime":1606128706138,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"a4jsxt",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/index.tsx",[],["69","70"],"/app/src/components/App.tsx",[],"/app/src/components/BarChart.tsx",["71"],"import React, { useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { AnyAction } from 'redux';\n\nimport { IRootState } from '../reducers';\nimport {\n  getNumericData,\n  setQuantity,\n  setOrderType,\n  setOrderDirection,\n} from '../actions/dataActions';\nimport { ArticleData } from '../models/models';\nimport { styles } from '../styles/styles';\nimport OrderDirectionInput from './OrderDirectionInput';\nimport OrderTypeInput from './OrderTypeInput';\nimport QuantityInput from './QuantityInput';\nimport { draw } from '../helper/draw';\nimport { getShown, getAlphabetic } from '../reducers/dataReducer';\n\ninterface DispatchProps {\n  getNumericData: () => void;\n  setQuantity: (quantity: number) => void;\n  setOrderType: (orderType: string) => void;\n  setOrderDirection: (orderDirection: string) => void;\n}\ninterface StateProps {\n  allNumericData: ArticleData;\n  allAlphabeticData: ArticleData;\n  shownData: ArticleData;\n  orderType: string;\n  orderDirection: string;\n  quantity: number;\n}\n\nexport const UnconnectedBarChart: React.FC<Props> = (props) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const {\n    allNumericData,\n    shownData,\n    quantity,\n    orderType,\n    orderDirection,\n  } = props;\n\n  useEffect(() => {\n    if (allNumericData.length === 0) {\n      //to prevent rendering twice\n      props.getNumericData();\n    }\n  }, []);\n\n  useEffect(() => {\n    let graphSvg = document.getElementById('graph_svg')!;\n    if (graphSvg) {\n      switch (quantity) {\n        case 10:\n          graphSvg.setAttribute('width', '600');\n          break;\n        case 50:\n          graphSvg.setAttribute('width', '1800');\n          break;\n        case 100:\n          graphSvg.setAttribute('width', '3600');\n          break;\n      }\n    }\n  }, [quantity]);\n\n  useEffect(() => {\n    if (shownData.length > 0) {\n      //first render is an empty array\n      draw(shownData, svgRef);\n    }\n  }, [shownData]);\n\n  const changeQuantity = (event: any) => {\n    props.setQuantity(event.target.value);\n  };\n  const changeOrderDirection = (event: any) => {\n    props.setOrderDirection(event.target.value);\n  };\n  const changeOrderType = (event: any) => {\n    props.setOrderType(event.target.value);\n  };\n\n  return (\n    <div style={styles.main}>\n      <div style={styles.inputWrapper}>\n        <OrderDirectionInput\n          orderDirection={orderDirection}\n          changeOrderDirection={changeOrderDirection}\n        />\n        <OrderTypeInput\n          orderTypeValue={orderType}\n          changeOrderType={changeOrderType}\n        />\n        <QuantityInput\n          quantityValue={quantity}\n          handleQuantity={changeQuantity}\n        />\n      </div>\n      <svg\n        ref={svgRef}\n        data-testid=\"graph_svg\"\n        id=\"graph_svg\"\n        width=\"1800\"\n        height=\"500\"\n        style={styles.container}\n      ></svg>\n    </div>\n  );\n};\n\nexport const mapStateToProps = ({ data }: IRootState): StateProps => {\n  const { allNumericData, orderType, orderDirection, quantity } = data;\n  return {\n    allNumericData,\n    orderType,\n    orderDirection,\n    quantity,\n    allAlphabeticData: getAlphabetic(data),\n    shownData: getShown(data),\n  };\n};\n\nexport const mapDispatchToProps = (\n  dispatch: Dispatch<AnyAction>\n): DispatchProps => {\n  return {\n    getNumericData: () => {\n      dispatch(getNumericData());\n    },\n\n    setOrderDirection: (orderDirection) => {\n      dispatch(setOrderDirection(orderDirection));\n    },\n    setQuantity: (quantity) => {\n      dispatch(setQuantity(quantity));\n    },\n\n    setOrderType: (orderType) => {\n      dispatch(setOrderType(orderType));\n    },\n  };\n};\ntype Props = StateProps & DispatchProps;\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UnconnectedBarChart);\n","/app/src/reducers/index.ts",[],"/app/src/actions/dataActions.ts",[],"/app/src/helper/draw.ts",[],"/app/src/reducers/dataReducer.tsx",["72"],"import { createSelector } from 'reselect';\nimport {\n  NUMERIC_DATA_LOADING_SUCCESS,\n  QUANTITY_CHANGE,\n  ORDER_TYPE_CHANGE,\n  ORDER_DIRECTION_CHANGE,\n} from '../actions/actionTypes';\nimport { types } from '../helper/stringTypes';\nimport { dataActionsTypes } from '../actions/actionTypes';\nimport { InitState } from '../models/models';\nimport { MergeSort } from '../helper/sorting';\n\nconst INITIAL_STATE = {\n  allNumericData: [],\n  quantity: 50,\n  orderDirection: types.ascending,\n  orderType: types.numeric,\n};\n\nexport default (state = INITIAL_STATE, action: dataActionsTypes): InitState => {\n  switch (action.type) {\n    case NUMERIC_DATA_LOADING_SUCCESS:\n      return {\n        ...state,\n        allNumericData: action.payload,\n      };\n\n    case QUANTITY_CHANGE:\n      return {\n        ...state,\n        quantity: action.payload,\n      };\n\n    case ORDER_TYPE_CHANGE:\n      return {\n        ...state,\n        orderType: action.payload,\n      };\n\n    case ORDER_DIRECTION_CHANGE:\n      return {\n        ...state,\n        orderDirection: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// Selectors\n\nconst getQuantity = (state: InitState) => state.quantity;\nconst getOrderType = (state: InitState) => state.orderType;\nconst getOrderDirection = (state: InitState) => state.orderDirection;\nconst getAllNumericData = (state: InitState) => state.allNumericData;\n\nexport const getAlphabetic = createSelector(\n  [getAllNumericData, getOrderType],\n  (allNumericData, orderType) => {\n    if (orderType === types.alphabetic) {\n      //to not process when the page is initially loaded.\n      return MergeSort(allNumericData, types.alphabetic);\n    }\n    return []; //to prevent returning undefined since slice method is used for chosendata\n  }\n);\n\nexport const getShown = createSelector(\n  [\n    getQuantity,\n    getOrderType,\n    getOrderDirection,\n    getAllNumericData,\n    getAlphabetic,\n  ],\n  (quantity, orderType, orderDirection, allNumericData, alphabeticData) => {\n    let shown,\n      chosenData =\n        orderType === types.alphabetic ? alphabeticData : allNumericData;\n\n    shown =\n      orderDirection === types.ascending\n        ? chosenData.slice(0, quantity)\n        : chosenData.slice(-quantity).reverse();\n    return shown;\n  }\n);\n","/app/src/components/QuantityInput.tsx",[],"/app/src/components/OrderDirectionInput.tsx",[],"/app/src/components/OrderTypeInput.tsx",[],"/app/src/styles/styles.tsx",[],"/app/src/helper/sorting.ts",[],"/app/src/actions/actionTypes.ts",[],"/app/src/helper/stringTypes.ts",[],"/app/src/helper/setProcessedData.ts",[],"/app/src/articles.ts",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":51,"column":6,"nodeType":"79","endLine":51,"endColumn":8,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":20,"column":1,"nodeType":"83","endLine":49,"endColumn":3},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allNumericData.length' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["86"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [allNumericData.length, props]",{"range":"89","text":"90"},[1399,1401],"[allNumericData.length, props]"]